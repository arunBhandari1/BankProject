package com.rab3tech.admin.ui.controller;

import java.io.IOException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;

import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import com.rab3tech.admin.service.LoanTypesService;
import com.rab3tech.customer.service.CustomerService;
import com.rab3tech.customer.service.LoanRequestService;
import com.rab3tech.customer.service.impl.CustomerChequeRequestService;
import com.rab3tech.dao.entity.Login;
import com.rab3tech.utils.UserSessionUtils;
import com.rab3tech.utils.Utils;
import com.rab3tech.vo.CustomerChequeRequestVO;
import com.rab3tech.vo.CustomerUpdateVO;
import com.rab3tech.vo.CustomerVO;
import com.rab3tech.vo.LoanRequestVO;
import com.rab3tech.vo.LoanTypesVO;
import com.rab3tech.vo.LoginVO;

@Controller
@RequestMapping("/admin")
public class CustomerController 
{

	@Autowired
	private CustomerService customerService;
	
	@Autowired
	private CustomerChequeRequestService customerChequeRequestService;
	
	@Autowired
	private LoanTypesService loanTypesService;
	
	@Autowired
	private LoanRequestService loanRequestService;
	
	@GetMapping("/customers")
	public String showCustomer(Model model) {
	   List<CustomerVO> customerVOs=customerService.findCustomers();
	   model.addAttribute("customerVOs", customerVOs);
	   return "admin/customers";
	}
	

	
	@GetMapping("/allLoans")
	public String showAllLoans(Model model)
	{
		List<LoanTypesVO> loans = loanTypesService.getAll();
		model.addAttribute("loans",loans);
		return "admin/allLoans";
	}
	
	@PostMapping("/editLoans")
	public String editLoan(@ModelAttribute LoanTypesVO loanTypesVO, Model model)
	{
		
			loanTypesVO.setDoe(new Timestamp(new Date().getTime()));
			loanTypesService.updateLoanType(loanTypesVO);
		
		return "redirect:/admin/allLoans";
	}
	
	@GetMapping("/deleteLoans/{id}")
	public String deleteLoan(@PathVariable int id)
	{	
			loanTypesService.deleteByid(id);
		
			return "redirect:/admin/allLoans";
	}
	
	@GetMapping("/customerGet")
	public String show(@RequestParam String data,Model model)
	{
		// List<CustomerVO> customer=customerService.findCustomers();
		 List<CustomerVO> customerVO = new ArrayList<>();
		 customerVO = customerService.findCustomers();
	 
	    if(data.equals("CUSTOMER"))
	   {
//		  customerVO = new ArrayList<>();
//		   for(CustomerVO cus: customer)
//		   {
//			   if (cus.getRole().equals("CUSTOMER"))
//			   {
//				   customerVO.add(cus);
//			   }
//		   }
		   customerVO =customerVO.stream().filter(s-> s.getRole().equalsIgnoreCase("Customer")).collect(Collectors.toList());
	   }
	  
	    else if(data.equals("EMPLOYEE"))
	   {
//		   customerVO = new ArrayList<>();
//		   for(CustomerVO cus: customer)
//		   {
//			   if (cus.getRole().equals("EMPLOYEE"))
//			   {
//				   customerVO.add(cus);
//			   }
//		   }
		   customerVO =customerVO.stream().filter(s-> s.getRole().equalsIgnoreCase("Employee")).collect(Collectors.toList());
		   
	   }
	   
	   model.addAttribute("customerVO", customerVO);
	   return "admin/dashboard";
	}
	
	
	@GetMapping("/employeeReply")
	public String showEmployeeOnly(Model model) {
	   List<CustomerVO> customer=customerService.findCustomers();
	   List<CustomerVO> customerVO = new ArrayList<>();
	   for(CustomerVO cus: customer)
	   {
		   if (cus.getRole().equals("EMPLOYEE"))
		   {
			   customerVO.add(cus);
		   }
	   }
	   model.addAttribute("customerVO", customerVO);
	   return "admin/dashboard";
	}
		
	
	@GetMapping("/customers/photo")
	public void findCustomerPhoto(@RequestParam int cid,HttpServletResponse response) throws IOException {
	   byte[] photo=customerService.findPhotoByid(cid);
	   response.setContentType("image/png");
	   ServletOutputStream outputStream=response.getOutputStream();
	   if(photo!=null) {
		   outputStream.write(photo);
	   }else {
		   outputStream.write(new byte[] {});
	   }
	   outputStream.flush();
	   outputStream.close();
	}
	
	@GetMapping("/customers/loanRequest")
	public String getLoanRequest(Model model, HttpSession session)
	{
		LoginVO  loginVO=(LoginVO)session.getAttribute("userSessionVO");
		String userName=loginVO.getName();
		model.addAttribute("userName", userName);
		
		List<LoanTypesVO> loans = loanTypesService.getAll();
		model.addAttribute("loans",loans);
		return "customer/loanRequest";
	
	}
	
	
	@PostMapping("/customers/saveRequest")
	public String findCustomerLoanRequest(@ModelAttribute LoanRequestVO loanRequestVO, Model model,HttpSession session)
	{
		loanRequestVO.setLoginVO((LoginVO)session.getAttribute("userSessionVO"));
		loanRequestVO.setDoe(new Timestamp(new Date().getTime()));
		loanRequestVO.setAppref("AS-" + Utils.genRandomAlphaNum());
		loanRequestService.saveLoanRequest(loanRequestVO);
		
		return("redirect:/customers/loanRequest");
	}
	
	@PostMapping("/updateCustomer")
	public String updateCustomer(@ModelAttribute CustomerUpdateVO customerUpdateVO,Model model) throws IOException {
		customerService.updateProfile(customerUpdateVO);
		//redirect to show all the records of the current customer in the database!
	   return "redirect:/admin/customers";
	}
	
}
